


{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}
{%- unless product.has_only_default_variant -%}
  {%- if block.settings.picker_type == 'button' -%}
    <variant-radios
      id="variant-radios-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <fieldset class="js product-form__input">
          <legend class="form__label">{{ option.name }}</legend>
          {% render 'product-variant-options', product: product, option: option, block: block %}
        </fieldset>
      {%- endfor -%}
      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-radios>
  {%- else -%}
  
    <variant-selects
      id="variant-selects-{{ section.id }}"
      class="no-js-hidden"
      data-section="{{ section.id }}"
      data-url="{{ product.url }}"
      {% if update_url == false %}
        data-update-url="false"
      {% endif %}
      {{ block.shopify_attributes }}
    >
      {%- for option in product.options_with_values -%}
        <div class="product-form__input product-form__input--dropdown">
          <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
            {{ option.name }}
          </label>
         
          <div class="button-container" id="buttonContainer">
            <!-- Dropdown converted to buttons will be appended here -->
          </div>
         
                {% if option.name == "Color" %}
                  <select
                    id="Option-{{ section.id }}-{{ forloop.index0 }}"
                    class="color_swatches"
                    name="options[{{ option.name | escape }}]"
                    form="{{ product_form_id }}"
                  >
                  {% for value in option.values %}
  
                    <option
                      value="{{ value | escape }}"
                      {% if option.selected_value == value %}
                        selected="selected"
                      {% endif %}
                    >
                      {% if option_disabled -%}
                        {{- 'products.product.value_unavailable' | t: option_value: value -}}
                      {%- else -%}
                        {{- value -}}
                      {%- endif %}
                    </option>
                
                  {% endfor %}
                </select>
                {% else %}
                  <div class="select">
                      <select
                          id="Option-{{ section.id }}-{{ forloop.index0 }}"
                          class="select__select"
                          name="options[{{ option.name | escape }}]"
                          form="{{ product_form_id }}"
                        >
                        {% render 'product-variant-options', product: product, option: option, block: block %}
                        
                      </select>
                      {% render 'icon-caret' %}
                  </div>
                {% endif %}
        </div>
      {%- endfor -%}

      <script type="application/json">
        {{ product.variants | json }}
      </script>
    </variant-selects>
  {%- endif -%}
{%- endunless -%}

<noscript class="product-form__noscript-wrapper-{{ section.id }}">
  <div class="product-form__input{% if product.has_only_default_variant %} hidden{% endif %}">
    <label class="form__label" for="Variants-{{ section.id }}">
      {{- 'products.product.product_variants' | t -}}
    </label>
    <div class="select">
      <select
        name="id"
        id="Variants-{{ section.id }}"
        class="select__select"
        form="{{ product_form_id }}"
      >
        {%- for variant in product.variants -%}
          <option
            {% if variant == product.selected_or_first_available_variant %}
              selected="selected"
            {% endif %}
            {% if variant.available == false %}
              disabled
            {% endif %}
            value="{{ variant.id }}"
          >
            {%- liquid
              echo variant.title
              echo variant.price | money | strip_html | prepend: ' - '
              if variant.available == false
                echo 'products.product.sold_out' | t | prepend: ' - '
              endif
              if variant.quantity_rule.increment > 1
                echo 'products.product.quantity.multiples_of' | t: quantity: variant.quantity_rule.increment | prepend: ' - '
              endif
              if variant.quantity_rule.min > 1
                echo 'products.product.quantity.minimum_of' | t: quantity: variant.quantity_rule.min | prepend: ' - '
              endif
              if variant.quantity_rule.max != null
                echo 'products.product.quantity.maximum_of' | t: quantity: variant.quantity_rule.max | prepend: ' - '
              endif
              # TODO: enable theme-check once `item_count_for_variant` is accepted as valid filter
              # theme-check-disable
              assign cart_quantity = cart | item_count_for_variant: variant.id
              # theme-check-enable
              if cart_quantity > 0
                echo 'products.product.quantity.in_cart_html' | t: quantity: cart_quantity | prepend: ' - '
              endif
            -%}
          </option>
        {%- endfor -%}
      </select>
      {% render 'icon-caret' %}
    </div>
  </div>
</noscript>

<style>
  .button-container {
    display: flex;
    flex-wrap: wrap;
  }
  
  .button-container button {
    display: inline-block;
    margin: 5px; 
    height: 80px;
    width: 80px;
    border-radius: 50%;
    border: 1px solid #000;
    cursor: pointer;
  }  
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const dropdown = document.querySelector(".color_swatches");
    const buttonContainer = document.getElementById('buttonContainer');
    const selectedSize = document.querySelector('.select__select');
    const productFormButtons = document.querySelector('.product-form__submit');
    const buynowButton = document.querySelector('.shopify-payment-button__button');
    
    dropdown.hidden = true;
    dropdown.value = "Black";
    
    selectedSize.value = "Unselected";
    if (selectedSize.value === "Unselected") {
      productFormButtons.disabled = true;
      buynowButton.disabled = true;
    }

    function updateButtons() {
      // Clear existing buttons
      buttonContainer.innerHTML = '';

      // Create buttons from dropdown options
      for (const option of dropdown.options) {
        const button = document.createElement('button');
        const variantImg = document.createElement('img');
        
        // Use the variant images data for the specific option value
        variantImg.src = `//israel-nanor-test.myshopify.com/cdn/shop/files/${option.value}-Handbag.jpg?v=1703050576"`
        variantImg.width = 50;
        variantImg.height = 50;
        variantImg.style.borderRadius = "50%";
      
        button.appendChild(variantImg);
        button.value = option.value;

        button.style.backgroundColor = "white";
        if (option.value === "Black") {
          button.style.backgroundColor = "black";
        }
        button.classList.add("swatch_btn");

        button.addEventListener('click', function () {
          const btnrow = document.querySelectorAll('.swatch_btn')
          btnrow.forEach(btn => {
            btn.style.backgroundColor = "white";
          });

          button.style.backgroundColor = "black";
          dropdown.value = option.value;
          dropdown.dispatchEvent(new Event('change', { bubbles: true }));
        });

        // Append button to the container
        buttonContainer.appendChild(button);
      }
    }

    updateButtons();
  });
</script>
